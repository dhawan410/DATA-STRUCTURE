class Solution
{
public:
    bool bfs(int s,int parent,vector<int> adj[],vector<bool>&visited){

       

       queue<pair<int,int>>dq;

       dq.push(make_pair(s,-1));

       visited[s]=true;

       

       while(!dq.empty()){

           

           pair<int,int>p = dq.front();

           dq.pop();

           

           int u = p.first;

           int parent = p.second;

           

           for(auto it : adj[u]){

    

               if(visited[it]==false){

                   dq.push(make_pair(it,u));

                   visited[it]=true;

               }else if(visited[it]==true && it!=parent){

                   return true;

               }

               

           }

       }

       return false;

        

    }

    bool dfs(int s,int parent,vector<int> adj[],vector<bool>&visited){

        

        visited[s]=true;

        

        for(auto it : adj[s]){

            

            if(visited[it]==false){

                

                if(dfs(it,s,adj,visited)){

                    return true;

                }

                

            }else if(visited[it]==true && parent!=it){

                return true;

            }

            

        }

        

        return false;

        

    }

    bool isCycle(int v, vector<int> adj[]) {

        

        vector<bool>visited(v,false);

        

        for(int i=0;i<v;i++){

            

            if(visited[i]==false){

                

                if(dfs(i,-1,adj,visited)){

                    return true;

                }

            }

        }

        return false;

        

    }
};